{"version":3,"sources":["components/Header.js","components/todo/Form.js","components/todo/Item.js","components/todo/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Header","StlyedHeader","styled","header","nextId","Form","props","useState","value","setValue","StyledForm","onSubmit","e","preventDefault","id","text","check","StyledInput","type","onChange","target","InputButton","form","input","button","Item","StyledLine","StyledItem","onClick","event","toggleLine","StyledDeleteButton","remove","span","css","Todo","todoList","setTodoList","item","concat","ContentHeader","StyledList","map","todo","window","confirm","filter","console","log","newTodoList","ul","p","GlobalStyle","createGlobalStyle","Wrapper","div","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05d0b0e7.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport default function Header() {\r\n  return <StlyedHeader>React.js로 만든 TO-DO APP</StlyedHeader>;\r\n}\r\n\r\nconst StlyedHeader = styled.header`\r\n  background-color: #00462a;\r\n  color: #ffffff;\r\n  font-size: 2rem;\r\n  height: 7rem;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-left: 5rem;\r\n`;\r\n","import styled from \"styled-components\";\r\nimport React, { useState } from \"react\";\r\n\r\nlet nextId = 0;\r\n\r\nexport default function Form(props) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const onChange = (e) => {\r\n    // 입력되는 text를 value변수에 반영\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const formSubmit = (e) => {\r\n    e.preventDefault();\r\n    // console.log(\"FORM SUBMIT\");\r\n    // 빈 문자열이 입력시 함수 종료\r\n    if (value === \"\") {\r\n      return;\r\n    }\r\n\r\n    props.onSubmit({\r\n      id: nextId,\r\n      text: value,\r\n      check: false,\r\n    });\r\n\r\n    nextId++;\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={formSubmit}>\r\n      <StyledInput\r\n        id=\"newItem\"\r\n        type=\"text\"\r\n        onChange={onChange}\r\n        value={value}\r\n      ></StyledInput>\r\n      <InputButton type=\"submit\">추가</InputButton>\r\n    </StyledForm>\r\n  );\r\n}\r\n\r\nconst StyledForm = styled.form`\r\n  background-color: #272727;\r\n  display: flex;\r\n  color: #000000;\r\n  font-size: 2rem;\r\n  height: 7rem;\r\n  align-items: center;\r\n  padding-left: 5rem;\r\n  padding-right: 5rem;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  font-size: 3rem;\r\n  border: 0;\r\n  flex: 1;\r\n`;\r\n\r\nconst InputButton = styled.button`\r\n  font-size: 2rem;\r\n  border: 0;\r\n  margin-left: 1rem;\r\n  padding: 0.5rem;\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport default function Item(props) {\r\n  const itemDelete = (event) => {\r\n    event.preventDefault();\r\n    props.remove();\r\n  };\r\n\r\n  const itemToggleLine = (event) => {\r\n    event.preventDefault();\r\n    props.toggleLine();\r\n  };\r\n\r\n  // 이부분을 주석해제하면 클릭시 줄이 그어지는 기능이 작동함.\r\n  // 다만 함수 내부에 styled component를 작성하였다는 경고가 뜬다.\r\n  // const StyledItem = styled.span`\r\n  //   font-size: 2rem;\r\n  //   text-decoration: ${props.check ? \"line-through\" : \"none\"};\r\n  // `;\r\n\r\n  return (\r\n    <StyledLine>\r\n      <StyledItem onClick={itemToggleLine}>\r\n        {props.text} {props.check ? \"완료\" : \"미완료\"}\r\n      </StyledItem>\r\n      <StyledDeleteButton onClick={itemDelete}>X</StyledDeleteButton>\r\n    </StyledLine>\r\n  );\r\n}\r\n\r\nconst StyledLine = styled.form`\r\n  margin: 1rem;\r\n`;\r\n\r\n// 작동되고 있지 않음\r\nconst StyledItem = styled.span`\r\n  ${(props) => css`\r\n    font-size: 2rem;\r\n    text-decoration: ${props.check ? \"line-through\" : \"none\"};\r\n  `}\r\n`;\r\n\r\nconst StyledDeleteButton = styled.button`\r\n  background: #272727;\r\n  color: #ffffff;\r\n  margin-left: 1rem;\r\n  border: none;\r\n  border-radius: 50%;\r\n  font-size: 2rem;\r\n`;\r\n","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Form from \"./Form\";\r\nimport Item from \"./Item\";\r\n\r\nexport default function Todo() {\r\n  const [todoList, setTodoList] = useState([]);\r\n\r\n  const addItem = (item) => {\r\n    setTodoList(\r\n      todoList.concat({\r\n        id: item.id,\r\n        text: item.text,\r\n        check: item.check,\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeItem = (id, text) => {\r\n    if (!window.confirm(text + \"을/를 삭제하시겠습니까?\")) {\r\n      return;\r\n    }\r\n    // filter를 통과한 원소만 모아서 새로운 배열을 만든다.\r\n    setTodoList(todoList.filter((item) => item.id !== id));\r\n    console.log(todoList);\r\n  };\r\n\r\n  const toggleLine = (id) => {\r\n    const newTodoList = todoList.map((item) => {\r\n      if (item.id === id) {\r\n        item.check = !item.check;\r\n      }\r\n      return item;\r\n    });\r\n    setTodoList(newTodoList);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={addItem}></Form>\r\n      <ContentHeader>할 일 목록</ContentHeader>\r\n      <StyledList>\r\n        {todoList.map((todo) => (\r\n          <div key={todo.id}>\r\n            <Item\r\n              id={todo.id}\r\n              text={todo.text}\r\n              check={todo.check}\r\n              remove={() => removeItem(todo.id, todo.text)}\r\n              toggleLine={() => toggleLine(todo.id)}\r\n            ></Item>\r\n          </div>\r\n        ))}\r\n      </StyledList>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst StyledList = styled.ul`\r\n  margin-left: 10rem;\r\n`;\r\n\r\nconst ContentHeader = styled.p`\r\n  font-size: 3rem;\r\n  font-weight: bold;\r\n  margin-left: 10rem;\r\n`;\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nimport Header from \"./components/Header.js\";\r\nimport Todo from \"./components/todo/Todo\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html {\r\n    font-size : 10px;\r\n  }\r\n  body {\r\n    margin: 0;\r\n    background-color: #eeeecc;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div``;\r\n\r\nfunction App() {\r\n  return (\r\n    <Wrapper>\r\n      <GlobalStyle />\r\n      <Header />\r\n      <Todo />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}